setwd('/Users/emeryyi/Documents/Research/googleproject/gglasso')
source("./source/gglasso.r")#
source("./source/model.r")#
source("./source/utilities.r")#
dyn.load("./source/gglasso.so")#
#
dl <- function(r,delta)#
{#
	d=rep(0,length(r))#
	for (i in 1:length(r))#
	{#
		if (r[i]< (-delta)) d[i]=-2*delta#
		else if (r[i]>delta) d[i]=2*delta#
		else d[i]=2*r[i]#
#
	}#
	return (d)#
}#
#
#
set.seed(11)#
x=matrix(rnorm(50*200),50,200) #
set.seed(11)#
y=sample(c(-1,1),50,replace=T)#
group<-rep(1:40,each=5)#
nobs=nrow(x)#
nvars=ncol(x)#
#
#
bn=as.integer(max(group))#
bs=as.integer(as.numeric(table(group)))#
delta=0.4#
pf=rep(1,bn)#
system.time(m1 <- gglasso(loss="hreg",y=y,x=x,group=group,eps=1e-12,pf=pf,delta=delta))
setwd('/Users/emeryyi/Documents/Research/googleproject/gglasso/source')
dhreg <- function(r,delta)#
{#
	dl = - 2 * min(abs(r) , delta) * sign(r)#
	dl#
}#
#
#
dhsvm <- function(v,delta)#
{#
	r = v[1]#
	if (r > 1) dl = 0#
	else if (r <= (1 - delta)) dl = - 1#
    else dl = (r - 1) / delta#
	dl#
}#
#
#
dlogit <- function(r,delta) #
{#
	dl = - 1 / (1 + exp(r))#
	dl#
}#
#
dsqsvm <- function(r,delta) #
{#
	dl = - 2 * ifelse( (1 - r) > 0, (1 - r), 0)#
	dl#
}#
#
dls <- function(r,delta) #
{#
	dl = - r#
}#
#
margin <- function(b0, beta, y, x, delta, loss = c("ls","hreg","logit","sqsvm","hsvm")) {#
	loss = match.arg(loss)#
	nobs = nrow(x)#
	b0MAT = matrix(rep(b0, nobs), nrow = nobs, byrow = TRUE)#
	link = x %*% beta + b0MAT#
    if(loss %in% c("logit","sqsvm","hsvm")){ r <- y * link#
    }else r <- y - link#
	fun = paste("d", loss, sep = "")#
    dMat = apply(r, c(1,2), eval(fun), delta = delta)#
    if(loss %in% c("logit","sqsvm","hsvm")){ yxdMat = t(x) %*% (dMat*y) / nobs#
    }else yxdMat = t(x) %*% dMat / nobs#
    yxdMat#
}#
#
#
KKT <- function(b0, beta, y, x, lambda, pf, group, thr, delta, loss = c("ls","hreg","logit","sqsvm","hsvm")){#
	loss = match.arg(loss)#
	bn = as.integer(max(group))#
	dl = margin(b0, beta, y, x, delta, loss)#
	B <- matrix(NA, ncol = length(lambda))#
    ctr <- 0#
    for (l in 1:length(lambda)) {#
        for (g in 1:bn)  {#
			ind = (group == g)#
			dl_norm <- sqrt(crossprod(dl[ind,l],dl[ind,l]))#
			b_norm <- sqrt(crossprod(beta[ind,l],beta[ind,l]))#
            if (b_norm!=0) {#
                AA <- dl[ind,l] +  beta[ind,l] * lambda[l] * pf[g] / b_norm#
                if (abs(sum(AA)) >= thr) {#
                  cat("violate at b != 0", abs(sum(AA)), "\n")#
                  ctr <- ctr + 1#
                }#
            }else{#
                BB <- dl_norm - pf[g] * lambda[l]#
                if (BB > thr) {#
                  cat("violate at b = 0", BB, "\n")#
                  ctr <- ctr + 1#
                }#
            }#
        }#
    }#
    cat("# of violations", ctr, "\n")#
    return(ctr/length(lambda))#
}#
#
#
#
lambda = m1$lambda#
beta = m1$beta#
b0 = m1$b0#
thr = 1e-5#
loss = class(m1)[[2]]#
#
dl = margin(b0, beta, y, x, delta, loss)#
#
KKT(b0, beta, y, x, lambda, pf, group, thr, delta, loss = loss)
